///before GNC
#include <Servo.h>
 
Servo m0;
Servo m1;

bool debug = true;
unsigned long mill = 0;

void setup() {
 
  if(debug) Serial.begin(115200);

  m0.attach(5 );
  m1.attach(6 );
  
  if(debug) Serial.println("writing...");
  m0.write(0);  m1.write(0);
  delay(1000); //delay 1 second,  some speed controllers may need longer
  m0.write(90);  m1.write(90);
  delay(1000); //delay 1 second,  some speed controllers may need longer
  m0.write(0);  m1.write(0);
  delay(1000); //delay 1 second,  some speed controllers may need longer
  if(debug) Serial.println("done");
  
  if(debug) Serial.println("Done with setup");
  unsigned long mill = millis();
}

static int minPWM = 1027;     // by inspection
static int maxPWM = 1985;     // by inspection
float midPWM      = 1488.;    // by inspection
float steeringGain = 0.5;
float expo = 1.;           // expo coefficient
int   limit = 0;             // travel limit TODO convert from angle to ms

void loop() {

  int  steerRaw    = pulseIn( 7, HIGH, 25000); // 20000 occasionally has zeros -> moved this to expose PWM pin
  int  throttleRaw = pulseIn( 8, HIGH, 25000);
  bool imuMode     = pulseIn( 9, HIGH, 25000) > 1500;

  int steerStick    = map(steerRaw,    minPWM, maxPWM, midPWM*(1-steeringGain), midPWM*(1+steeringGain));   // throttle, percent
  int throttleStick = throttleRaw; // map(throttleRaw, minPWM, maxPWM, minPWM, maxPWM);   // steer, percent

  int leftCmd  = constrain( throttleStick + (midPWM - steerStick), minPWM+limit, maxPWM-limit); 
  int rightCmd = constrain( throttleStick - (midPWM - steerStick), minPWM+limit, maxPWM-limit); 

  float leftExpo  = (((float)leftCmd) -midPWM)/midPWM;
  float rightExpo = (((float)rightCmd)-midPWM)/midPWM;

  leftExpo  =  signf(leftExpo)  * pow( abs(leftExpo),  expo);
  rightExpo =  signf(rightExpo) * pow( abs(rightExpo), expo);

  leftCmd  = leftExpo  * (494.-(float)limit) + midPWM;
  rightCmd = rightExpo * (494.-(float)limit) + midPWM;    // TODO get rid of magic numbers
  
  if(debug) { Serial.print(leftExpo);Serial.print(" ");Serial.print(rightExpo);Serial.println("Expo"); }
  
  if ((steerRaw==0) || (throttleRaw==0)) // inhibit if we lost signal
  {
    m0.writeMicroseconds(midPWM);
    m1.writeMicroseconds(midPWM);
    if (debug) Serial.println("Remove before flight inhibit");
  } else { 
    if (!imuMode) 
    {
      m0.writeMicroseconds(leftCmd);
      m1.writeMicroseconds(rightCmd);   
    } else {
      // use guided solution
      
    }
  }

  if (debug) 
  {
     Serial.print("Mode ");Serial.println(imuMode);
     Serial.print("L: ");Serial.print(leftCmd); Serial.print(" ");Serial.print(steerStick); Serial.print(" ");Serial.print(steerRaw); Serial.println(" steer ");  // throttle
     Serial.print("R: ");Serial.print(rightCmd);Serial.print(" ");Serial.print(throttleStick);Serial.print(" ");Serial.print(throttleRaw);Serial.println(" throttle ");  // elevator
     Serial.print("Loop time: ");Serial.println(millis() - mill);
  }
  mill = millis();
}

static inline float signf(float val) {
 if (val < 0) return -1.;
 if (val==0) return 0.;
 return 1.;
}

float mapf(long x, long in_min, long in_max, long out_min, long out_max)
{
 return (float)(x - in_min) * (out_max - out_min) / (float)(in_max - in_min) + out_min;
}